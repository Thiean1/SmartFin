import React, { useEffect, useState } from "react";
import axios from "axios";
import "./Dashboard.scss";

const budgetData = [
  { name: "Ä‚n uá»‘ng", used: 3500000, total: 4000000 },
  { name: "Giao thÃ´ng", used: 1200000, total: 1500000 },
  { name: "Giáº£i trÃ­", used: 800000, total: 1000000 },
  { name: "Mua sáº¯m", used: 2000000, total: 3000000 },
];

const goalData = [
  { name: "Mua xe mÃ¡y má»›i", current: 45000000, target: 60000000 },
  { name: "Quá»¹ kháº©n cáº¥p", current: 25000000, target: 50000000 },
  { name: "Du lá»‹ch Nháº­t Báº£n", current: 8000000, target: 30000000 },
];

export default function Dashboard() {
  const user = JSON.parse(localStorage.getItem("user"));
  const userId = user?.ID_nguoi_dung;
  const [transactions, setTransactions] = useState([]);
  const [savings, setSavings] = useState([]);
  const [debts, setDebts] = useState([]);

  useEffect(() => {
    if (!userId) return;
    axios.get(`http://localhost:5000/api/giaodich?userId=${userId}`).then(res => setTransactions(res.data));
    axios.get(`http://localhost:5000/api/saving?userId=${userId}`).then(res => setSavings(res.data));
    axios.get(`http://localhost:5000/api/quanlyno?userId=${userId}`).then(res => setDebts(res.data));
  }, [userId]);

  // Tá»•ng há»£p dá»¯ liá»‡u
  const totalIncome = transactions.filter(t => t.Loai === "Thu nháº­p").reduce((sum, t) => sum + t.So_tien, 0);
  const totalExpense = transactions.filter(t => t.Loai === "Chi tiÃªu").reduce((sum, t) => sum + t.So_tien, 0);
  const totalSaving = savings.reduce((sum, s) => sum + (s.So_tien || 0), 0);
  const totalDebt = debts.reduce((sum, d) => sum + (d.So_tien || 0), 0);

  const statCards = [
    {
      title: "Tá»•ng thu nháº­p thÃ¡ng nÃ y",
      value: totalIncome.toLocaleString("vi-VN") + " Ä‘",
      desc: "Tá»•ng thu nháº­p thá»±c táº¿",
      color: "green",
      icon: "ðŸ“ˆ",
    },
    {
      title: "Tá»•ng chi tiÃªu thÃ¡ng nÃ y",
      value: totalExpense.toLocaleString("vi-VN") + " Ä‘",
      desc: "Tá»•ng chi tiÃªu thá»±c táº¿",
      color: "red",
      icon: "ðŸ“‰",
    },
    {
      title: "Tiáº¿t kiá»‡m thÃ¡ng nÃ y",
      value: totalSaving.toLocaleString("vi-VN") + " Ä‘",
      desc: "Tá»•ng tiáº¿t kiá»‡m thá»±c táº¿",
      color: "blue",
      icon: "ðŸ’°",
    },
    {
      title: "Tá»•ng ná»£ hiá»‡n táº¡i",
      value: totalDebt.toLocaleString("vi-VN") + " Ä‘",
      desc: "Tá»•ng ná»£ thá»±c táº¿",
      color: "orange",
      icon: "ðŸ’³",
    },
  ];

  return (
    <div className="dashboard">
      <div className="dashboard__stats">
        {statCards.map((card, idx) => (
          <div className={`dashboard__stat dashboard__stat--${card.color}`} key={idx}>
            <div className="dashboard__stat-icon">{card.icon}</div>
            <div className="dashboard__stat-title">{card.title}</div>
            <div className="dashboard__stat-value">{card.value}</div>
            <div className={`dashboard__stat-desc dashboard__stat-desc--${card.color}`}>{card.desc}</div>
          </div>
        ))}
      </div>
      <div className="dashboard__grid">
        <div className="dashboard__section">
          <div className="dashboard__section-title">ðŸ§­ Tiáº¿n Ä‘á»™ ngÃ¢n sÃ¡ch thÃ¡ng nÃ y</div>
          <div className="dashboard__section-desc">Theo dÃµi chi tiÃªu theo tá»«ng danh má»¥c</div>
          {budgetData.map((item) => (
            <div className="dashboard__progress-row" key={item.name}>
              <div className="dashboard__progress-label">
                {item.name}
                <span className="dashboard__progress-amount">
                  {item.used.toLocaleString()} / {item.total.toLocaleString()} Ä‘
                </span>
              </div>
              <div className="dashboard__progress-bar">
                <div
                  className="dashboard__progress-bar-inner"
                  style={{ width: `${(item.used / item.total) * 100}%` }}
                ></div>
              </div>
              <div className="dashboard__progress-percent">
                {((item.used / item.total) * 100).toFixed(1)}% Ä‘Ã£ sá»­ dá»¥ng
              </div>
            </div>
          ))}
        </div>
        <div className="dashboard__section">
          <div className="dashboard__section-title">Má»¥c tiÃªu tÃ i chÃ­nh</div>
          <div className="dashboard__section-desc">Tiáº¿n Ä‘á»™ Ä‘áº¡t Ä‘Æ°á»£c cÃ¡c má»¥c tiÃªu Ä‘Ã£ Ä‘áº·t ra</div>
          {goalData.map((item) => (
            <div className="dashboard__progress-row" key={item.name}>
              <div className="dashboard__progress-label">
                {item.name}
                <span className="dashboard__progress-amount">
                  {item.current.toLocaleString()} / {item.target.toLocaleString()} Ä‘
                </span>
              </div>
              <div className="dashboard__progress-bar">
                <div
                  className="dashboard__progress-bar-inner dashboard__progress-bar-inner--goal"
                  style={{ width: `${(item.current / item.target) * 100}%` }}
                ></div>
              </div>
              <div className="dashboard__progress-percent">
                {((item.current / item.target) * 100).toFixed(1)}% hoÃ n thÃ nh
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
} 