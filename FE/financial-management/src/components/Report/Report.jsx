import React, { useState } from "react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import "./Report.scss";

const categories = [
  { name: "ƒÇn u·ªëng", budget: 4000000, spent: 3500000 },
  { name: "Giao th√¥ng", budget: 1500000, spent: 1200000 },
  { name: "Mua s·∫Øm", budget: 3000000, spent: 2000000 },
  { name: "Gi·∫£i tr√≠", budget: 1000000, spent: 800000 },
  { name: "Y t·∫ø", budget: 1000000, spent: 200000 },
  { name: "H√≥a ƒë∆°n", budget: 1500000, spent: 1500000 },
  { name: "Kh√°c", budget: 8000000, spent: 9300000 },
];

const stats = [
  { title: "Thu nh·∫≠p", value: 25000000, color: "green", desc: "+0% so v·ªõi th√°ng tr∆∞·ªõc" },
  { title: "Chi ti√™u", value: 18500000, color: "red", desc: "-2.8% so v·ªõi th√°ng tr∆∞·ªõc" },
  { title: "Ti·∫øt ki·ªám", value: 6500000, color: "blue", desc: "+8.3% so v·ªõi th√°ng tr∆∞·ªõc" },
  { title: "T·ª∑ l·ªá ti·∫øt ki·ªám", value: "26%", color: "purple", desc: "M·ª•c ti√™u: 20%" },
];

const getStatus = (percent) => {
  if (percent < 80) return { label: "T·ªët", color: "#22c55e" };
  if (percent < 100) return { label: "C·∫£nh b√°o", color: "#f59e42" };
  return { label: "V∆∞·ª£t ng√¢n s√°ch", color: "#ef4444" };
};

// D·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì xu h∆∞·ªõng
const trendData = [
  { month: "1", income: 22000000, spending: 17000000, saving: 5000000 },
  { month: "2", income: 23000000, spending: 17500000, saving: 5500000 },
  { month: "3", income: 24000000, spending: 18000000, saving: 6000000 },
  { month: "4", income: 25000000, spending: 18500000, saving: 6500000 },
  { month: "5", income: 25500000, spending: 19000000, saving: 6500000 },
  { month: "6", income: 25000000, spending: 18500000, saving: 6500000 },
  { month: "7", income: 26000000, spending: 19500000, saving: 7000000 },
  { month: "8", income: 26500000, spending: 20000000, saving: 7500000 },
  { month: "9", income: 27000000, spending: 21000000, saving: 8000000 },
  { month: "10", income: 27500000, spending: 21500000, saving: 8500000 },
  { month: "11", income: 28000000, spending: 22000000, saving: 9000000 },
  { month: "12", income: 28500000, spending: 22500000, saving: 9500000 },
];

export default function Report() {
  const today = new Date();
  const [selectedDay, setSelectedDay] = useState(today.getDate());
  const [selectedMonth, setSelectedMonth] = useState(today.getMonth() + 1);
  const [selectedYear, setSelectedYear] = useState(today.getFullYear());
  const [activeTab, setActiveTab] = useState("spending");

  return (
    <div className="report-page">
      <div className="report-header-card">
        <div className="report-header-title">
          <span>üìÖ</span> B√°o c√°o t√†i ch√≠nh
        </div>
        <div className="report-header-desc">
          T·ªïng quan chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh trong th·ªùi gian b·∫°n ch·ªçn
        </div>
        <div className="report-date-picker">
          <select value={selectedDay} onChange={e => setSelectedDay(Number(e.target.value))}>
            {[...Array(31)].map((_, i) => (
              <option key={i+1} value={i+1}>{i+1}</option>
            ))}
          </select>
          <span>/</span>
          <select value={selectedMonth} onChange={e => setSelectedMonth(Number(e.target.value))}>
            {[...Array(12)].map((_, i) => (
              <option key={i+1} value={i+1}>{i+1}</option>
            ))}
          </select>
          <span>/</span>
          <select value={selectedYear} onChange={e => setSelectedYear(Number(e.target.value))}>
            {[...Array(6)].map((_, i) => (
              <option key={2022+i} value={2022+i}>{2022+i}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="report-stats-row">
        {stats.map((s, idx) => (
          <div className={`report-stat-card report-stat-card--${s.color}`} key={idx}>
            <div className="report-stat-title">{s.title}</div>
            <div className="report-stat-value">{typeof s.value === 'number' ? s.value.toLocaleString('vi-VN') + ' ƒë' : s.value}</div>
            <div className="report-stat-desc">{s.desc}</div>
          </div>
        ))}
      </div>
      <div className="report-tabs">
        <button className={activeTab === 'spending' ? 'active' : ''} onClick={() => setActiveTab('spending')}>Chi ti√™u</button>
        <button className={activeTab === 'trend' ? 'active' : ''} onClick={() => setActiveTab('trend')}>Xu h∆∞·ªõng</button>
        <button className={activeTab === 'goal' ? 'active' : ''} onClick={() => setActiveTab('goal')}>M·ª•c ti√™u</button>
        <button className={activeTab === 'analysis' ? 'active' : ''} onClick={() => setActiveTab('analysis')}>Ph√¢n t√≠ch</button>
      </div>
      {activeTab === 'spending' && (
        <div className="report-category-list">
          <div className="report-category-title">Chi ti√™u theo danh m·ª•c</div>
          <div className="report-category-desc">Ph√¢n t√≠ch chi ti·∫øt chi ti√™u trong ng√†y {selectedDay}/{selectedMonth}/{selectedYear}</div>
          {categories.map((cat, idx) => {
            const percent = Math.round((cat.spent / cat.budget) * 100);
            const status = getStatus(percent);
            return (
              <div className="report-category-row" key={idx}>
                <div className="report-category-row-top">
                  <span className="report-category-name">{cat.name}</span>
                  <span className="report-category-status" style={{ color: status.color }}>{status.label}</span>
                  <span className="report-category-amount">{cat.spent.toLocaleString('vi-VN')} ƒë</span>
                  <span className="report-category-percent">{((cat.spent / 18500000) * 100).toFixed(1)}% t·ªïng chi ti√™u</span>
                </div>
                <div className="report-category-budget">Ng√¢n s√°ch: {cat.budget.toLocaleString('vi-VN')} ƒë</div>
                <div className="report-category-progress-bar">
                  <div className="report-category-progress-bar-inner" style={{ width: percent + '%', background: status.color }} />
                </div>
                <div className="report-category-progress-label">{percent}% ƒë√£ s·ª≠ d·ª•ng</div>
              </div>
            );
          })}
        </div>
      )}
      {activeTab === 'trend' && (
        <div className="report-trend-card">
          <div className="report-category-title">Xu h∆∞·ªõng t√†i ch√≠nh nƒÉm {selectedYear}</div>
          <div className="report-category-desc">Bi·ªÉu ƒë·ªì thu nh·∫≠p, chi ti√™u, ti·∫øt ki·ªám theo th√°ng</div>
          <div style={{ width: '100%', height: 350 }}>
            <ResponsiveContainer>
              <LineChart data={trendData} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis tickFormatter={v => v.toLocaleString('vi-VN')} />
                <Tooltip formatter={v => v.toLocaleString('vi-VN') + ' ƒë'} />
                <Legend />
                <Line type="monotone" dataKey="income" name="Thu nh·∫≠p" stroke="#22c55e" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="spending" name="Chi ti√™u" stroke="#ef4444" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="saving" name="Ti·∫øt ki·ªám" stroke="#3b82f6" strokeWidth={2} dot={false} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      )}
      {/* C√°c tab kh√°c c√≥ th·ªÉ b·ªï sung sau */}
    </div>
  );
} 